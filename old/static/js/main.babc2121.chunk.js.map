{"version":3,"sources":["serviceWorker.js","client/Routes/Home.jsx","conf/conf.js","index.jsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","autoBind","react_default","a","createElement","Fragment","reactstrap_es","className","timeout","React","Component","websiteUrl","sitemapBase","basePath","apiUrl","clientPort","prerender","enabled","port","host","cache_maxpages","cache_ttl","path","authLink","setContext","_","_ref","headers","token","localStorage","getItem","objectSpread","authorization","concat","httpLink","createUploadLink","uri","client","ApolloClient","link","cache","InMemoryCache","jsx","react_apollo_browser_umd","Routes_Home_default","rootElement","document","getElementById","hasChildNodes","ReactDOM","hydrate","render","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.babc2121.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport autoBind from \"react-autobind\";\nimport {\n    Fade\n} from \"reactstrap\";\n\nimport \"./Home.css\";\n\n\nexport default class extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        autoBind(true);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Fade>\n                    <h1 className=\"t-1\">Hello.</h1>\n                </Fade>\n\n                <Fade timeout={1000}>\n                    <h3 className=\"t-2\">My name is Gabriele Angrisani.</h3>\n                </Fade>\n                <Fade timeout={2000}>\n                    <h3 className=\"t-3\">:)</h3>\n                </Fade>\n                                <Fade timeout={4000}>\n                    <h2 className=\"t-4\">Nice to meet you!</h2>\n                </Fade>\n\n            </React.Fragment>\n        );\n    }\n}","var config = {\n    websiteUrl: typeof window !== \"undefined\" ? 'http://' + window.location.hostname : 'http://127.0.0.1:3000',\n    sitemapBase: \"http://127.0.0.1:3000/\",\n    basePath: \"/\" ,\n    apiUrl: typeof window !== \"undefined\" ? 'http://' + window.location.hostname + ':4000' : 'http://127.0.0.1:4000',\n    clientPort: '3000',\n    prerender: {\n        enabled: false,\n        port: 60000,\n        host: 'http://127.0.0.1',\n        cache_maxpages: 1000,\n        cache_ttl: 3600\n    },\n    path: 'graphql'\n}\n\nexport default config;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { setContext } from 'apollo-link-context'\nimport { createUploadLink } from 'apollo-upload-client'\n\nimport Home from \"@this/src/client/Routes/Home.jsx\";\nimport config from \"@this/conf/conf.js\"\n\nconst authLink = setContext((_, { headers }) => {\n    const token = localStorage.getItem(\"AUTH_TOKEN\")\n    return {\n        headers: {\n            ...headers,\n            authorization: token ? `Bearer ${token}` : ''\n        }\n    }\n})\n\nconst httpLink = createUploadLink({\n    uri: config.apiUrl + \"/\" + config.path\n})\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n})\n\n\nconst jsx = (<div>\n    <ApolloProvider client={client}>\n        <Home />\n    </ApolloProvider>\n</div>\n);\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n    ReactDOM.hydrate(jsx, rootElement);\n} else {\n    ReactDOM.render(jsx, rootElement);\n}\n\n\n// switch register to unregister to disable serviceWorker (offline available app)\n// serviceWorker.unregister();\nserviceWorker.register();"],"sourceRoot":""}