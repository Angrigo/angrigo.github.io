{"version":3,"sources":["assets/images/me.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Image","src","className","alt","id","App","require","moment","fromNow","type","placeholder","aria-label","aria-describedby","value","readOnly","Container","Row","Col","xs","href","icon","faLinkedin","size","faGithub","faFacebook","faInstagram","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,gC,wJCM3C,SAASC,EAAT,GAAyB,IAARC,EAAO,EAAPA,IACf,OACE,yBAAKC,UAAU,cACb,yBAAKD,IAAKA,EAAKE,IAAI,WAAWD,UAAU,8BAA8BE,GAAG,YA4DhEC,MAxDf,WAME,OACE,oCACE,kBAACL,EAAD,CAAOC,IAAKK,EAAQ,MACpB,yBAAKF,GAAG,SAASF,UAAU,WACzB,wBAAIA,UAAU,aAAd,sBACA,wBAAIA,UAAU,aAAd,qCACA,wBAAIA,UAAU,aAAd,gDACA,wBAAIA,UAAU,aAAd,mBAVGK,IAAO,aAAc,cAAcC,SAAQ,GAU9C,QACA,gCAAYN,UAAU,yBAAtB,iCACA,yBAAKA,UAAU,sCACb,2BAAOO,KAAK,OAAOP,UAAU,eAAeQ,YAAY,QAAQC,aAAW,QAAQC,mBAAiB,eAAeC,MAAM,0BAA0BC,UAAQ,IAC3J,yBAAKZ,UAAU,uBACb,0BAAMA,UAAU,mBAAmBE,GAAG,gBAAe,uBAAGF,UAAU,uBAGtE,yBAAKA,UAAU,sCACb,2BAAOO,KAAK,OAAOP,UAAU,eAAeQ,YAAY,YAAYC,aAAW,YAAYC,mBAAiB,eAAeC,MAAM,iBAAiBC,UAAQ,IAC1J,yBAAKZ,UAAU,uBACb,0BAAMA,UAAU,mBAAmBE,GAAG,gBAAe,uBAAGF,UAAU,oBAGtE,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKd,UAAU,kCACb,kBAACe,EAAA,EAAD,CAAKC,GAAG,QACN,uBAAGC,KAAK,kDACN,kBAAC,IAAD,CAAiBC,KAAMC,IAAYC,KAAK,SAG5C,kBAACL,EAAA,EAAD,CAAKC,GAAG,QACN,uBAAGC,KAAK,8BACN,kBAAC,IAAD,CAAiBC,KAAMG,IAAUD,KAAK,SAG1C,kBAACL,EAAA,EAAD,CAAKC,GAAG,QACN,uBAAGC,KAAK,8CACN,kBAAC,IAAD,CAAiBC,KAAMI,IAAYF,KAAK,SAG5C,kBAACL,EAAA,EAAD,CAAKC,GAAG,QACN,uBAAGC,KAAK,+CACN,kBAAC,IAAD,CAAiBC,KAAMK,IAAaH,KAAK,cC/CrCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a5455904.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.18b5ca95.jpg\";","import React from 'react';\nimport moment from \"moment\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faLinkedin, faInstagram, faFacebook, faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { Row, Col, Container } from \"reactstrap\"\n\nfunction Image({ src }) {\n  return (\n    <div className=\"propic-ext\">\n      <img src={src} alt=\"gabriele\" className=\"rounded mx-auto d-block m-5\" id=\"propic\" />\n    </div>\n  );\n}\nfunction App() {\n\n  let birthday = () => {\n    return moment('1999.10.02', 'YYYY.MM.DD').fromNow(true);\n  }\n\n  return (\n    <>\n      <Image src={require(\"./assets/images/me.jpg\")} />\n      <div id=\"fields\" className=\"mx-auto\">\n        <h3 className=\"text-left\">Gabriele Angrisani</h3>\n        <h5 className=\"text-left\">&nbsp;&nbsp;&nbsp;&nbsp;software engineer</h5>\n        <h5 className=\"text-left\">&nbsp;&nbsp;&nbsp;&nbsp;from Cava de' Tirreni, Italy</h5>\n        <h5 className=\"text-left\">&nbsp;&nbsp;&nbsp;&nbsp;{birthday()} old</h5>\n        <blockquote className=\"blockquote text-right\">don't be pale, color yourself</blockquote>\n        <div className=\"input-group mt-4 fieldInfo mx-auto\">\n          <input type=\"text\" className=\"form-control\" placeholder=\"Email\" aria-label=\"Email\" aria-describedby=\"basic-addon1\" value=\"gab.angrisani@gmail.com\" readOnly />\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"basic-addon1\"><i className=\"fas fa-envelope\" /></span>\n          </div>\n        </div>\n        <div className=\"input-group mt-3 fieldInfo mx-auto\">\n          <input type=\"text\" className=\"form-control\" placeholder=\"Telephone\" aria-label=\"Telephone\" aria-describedby=\"basic-addon1\" value=\"+39 3383020096\" readOnly />\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"basic-addon1\"><i className=\"fas fa-phone\" /></span>\n          </div>\n        </div>\n        <Container>\n          <Row className=\"justify-content-md-center mt-4\">\n            <Col xs=\"auto\">\n              <a href=\"https://www.linkedin.com/in/gabrieleangrisani/\">\n                <FontAwesomeIcon icon={faLinkedin} size=\"3x\" />\n              </a>\n            </Col>\n            <Col xs=\"auto\">\n              <a href=\"https://github.com/Angrigo\">\n                <FontAwesomeIcon icon={faGithub} size=\"3x\" />\n              </a>\n            </Col>\n            <Col xs=\"auto\">\n              <a href=\"https://www.facebook.com/gabrieleangrisani\">\n                <FontAwesomeIcon icon={faFacebook} size=\"3x\" />\n              </a>\n            </Col>\n            <Col xs=\"auto\">\n              <a href=\"https://www.instagram.com/gabrieleangrisani\">\n                <FontAwesomeIcon icon={faInstagram} size=\"3x\" />\n              </a>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}